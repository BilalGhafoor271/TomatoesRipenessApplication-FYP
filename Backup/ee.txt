from flask import Flask, render_template, Response
from ultralytics import YOLO
import cv2
import serial
import time

app = Flask(__name__)
model = YOLO("trained_tomato_yolov8.pt")

# Arduino Serial Port
try:
    arduino = serial.Serial('COM8', 9600, timeout=1)
    time.sleep(2)
    print("✅ Arduino connected on COM8")
except Exception as e:
    print("❌ Error opening serial port:", e)
    arduino = None

CAMERA_INDEX = 0
CAMERA_WIDTH = 640
CAMERA_HEIGHT = 480
KNOWN_WIDTH_CM = 4
FOCAL_LENGTH = 500

def estimate_distance(pixel_width):
    return (KNOWN_WIDTH_CM * FOCAL_LENGTH) / pixel_width

def generate():
    cap = cv2.VideoCapture(CAMERA_INDEX)
    if not cap.isOpened():
        print("❌ Could not open camera.")
        return

    cap.set(cv2.CAP_PROP_FRAME_WIDTH, CAMERA_WIDTH)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, CAMERA_HEIGHT)
    
    last_sent_time = time.time()

    while True:
        success, frame = cap.read()
        if not success:
            break

        results = model(frame)[0]
        best_box = None
        max_area = 0

        for box in results.boxes:
            cls = int(box.cls[0])
            if model.names[cls].lower() != 'fully-ripe':
                continue

            x1, y1, x2, y2 = map(int, box.xyxy[0])
            area = (x2 - x1) * (y2 - y1)
            if area > max_area:
                best_box = (x1, y1, x2, y2)
                max_area = area

        if best_box and (time.time() - last_sent_time) > 3:
            x1, y1, x2, y2 = best_box
            cx = int((x1 + x2) / 2)
            cy = int((y1 + y2) / 2)
            width = x2 - x1
            distance = estimate_distance(width)

            x_pos = (cx - CAMERA_WIDTH // 2) * 0.1
            y_pos = (CAMERA_HEIGHT - cy) * 0.1
            z_pos = distance

            msg = f"{x_pos:.2f},{y_pos:.2f},{z_pos:.2f}\n"
            print("[Sending to Arduino]:", msg.strip())
            if arduino and arduino.is_open:
                try:
                    arduino.write(msg.encode())
                    print("✅ Sent to Arduino.")
                except Exception as e:
                    print("❌ Failed to send to Arduino:", e)

            last_sent_time = time.time()

            cv2.rectangle(frame, (x1, y1), (x2, y2), (0,255,0), 2)
            cv2.putText(frame, "fully-ripe", (x1, y1-10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,0), 2)

        _, buffer = cv2.imencode('.jpg', frame)
        frame_bytes = buffer.tobytes()
        yield (b'--frame\r\nContent-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')

    cap.release()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/video_feed')
def video_feed():
    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)


from flask import Flask, render_template, Response
from ultralytics import YOLO
import cv2
import serial
import time

app = Flask(__name__)
model = YOLO("trained_tomato_yolov8.pt")

# Arduino Serial Port
try:
    arduino = serial.Serial('COM8', 9600, timeout=1)
    time.sleep(10)
    print("✅ Arduino connected on COM8")
except Exception as e:
    print("❌ Error opening serial port:", e)
    arduino = None

CAMERA_INDEX = 0
CAMERA_WIDTH = 640
CAMERA_HEIGHT = 480
KNOWN_WIDTH_CM = 4
FOCAL_LENGTH = 500

def estimate_distance(pixel_width):
    return (KNOWN_WIDTH_CM * FOCAL_LENGTH) / pixel_width

def generate():
    cap = cv2.VideoCapture(CAMERA_INDEX)
    if not cap.isOpened():
        print("❌ Could not open camera.")
        return

    cap.set(cv2.CAP_PROP_FRAME_WIDTH, CAMERA_WIDTH)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, CAMERA_HEIGHT)

    last_sent_time = time.time()

    while True:
        success, frame = cap.read()
        if not success:
            break

        results = model(frame)[0]
        best_box = None
        max_area = 0

        min_confidence = 0.7
        min_width = 30
        min_height = 30

        for box in results.boxes:
            cls = int(box.cls[0])
            conf = float(box.conf[0])

            if model.names[cls].lower() != 'fully-ripe':
                continue
            if conf < min_confidence:
                continue

            x1, y1, x2, y2 = map(int, box.xyxy[0])
            w = x2 - x1
            h = y2 - y1

            if w < min_width or h < min_height:
                continue

            area = w * h
            if area > max_area:
                best_box = (x1, y1, x2, y2)
                max_area = area

        if best_box and (time.time() - last_sent_time) > 3:
            x1, y1, x2, y2 = best_box
            cx = int((x1 + x2) / 2)
            cy = int((y1 + y2) / 2)
            width = x2 - x1
            distance = estimate_distance(width)

            x_pos = (cx - CAMERA_WIDTH // 2) * 0.1
            y_pos = (CAMERA_HEIGHT - cy) * 0.1
            z_pos = distance

            msg = f"{x_pos:.2f},{y_pos:.2f},{z_pos:.2f}\n"
            print("[Sending to Arduino]:", msg.strip())
            if arduino and arduino.is_open:
                try:
                    arduino.write(msg.encode())
                    print("✅ Sent to Arduino.")
                except Exception as e:
                    print("❌ Failed to send to Arduino:", e)

            last_sent_time = time.time()

            cv2.rectangle(frame, (x1, y1), (x2, y2), (0,255,0), 2)
            cv2.putText(frame, "fully-ripe", (x1, y1-10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,0), 2)

        _, buffer = cv2.imencode('.jpg', frame)
        frame_bytes = buffer.tobytes()
        yield (b'--frame\r\nContent-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')

    cap.release()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/video_feed')
def video_feed():
    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)
I